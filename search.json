[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Conformal Prediction\n\n\n\n\n\n\n\nConformal Prediction\n\n\nML\n\n\n\n\nExplaining Conformal Prediction\n\n\n\n\n\n\nApr 25, 2023\n\n\nMadhav Kanda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLaplace Approximation\n\n\n\n\n\n\n\nLaplace Approximation\n\n\nML\n\n\n\n\nImplementing Laplace Approximation in JAX\n\n\n\n\n\n\nApr 15, 2023\n\n\nMadhav Kanda\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-04-12-la.html",
    "href": "posts/2023-04-12-la.html",
    "title": "Laplace Approximation",
    "section": "",
    "text": "# Importing modules\ntry:\n  import jax                      # JAX is a library for differentiable programming\nexcept ModuleNotFoundError:\n  %pip install jaxlib jax\n  import jax\nimport jax.numpy as jnp           # JAX's numpy implementation\ntry:\n  import tensorflow_probability.substrates.jax as tfp     # TFP is a library for probabilistic programming\nexcept ModuleNotFoundError:\n  %pip install tensorflow-probability\n  import tensorflow_probability.substrates.jax as tfp\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nfrom tqdm import trange\nimport logging\nlogger = logging.getLogger()\nclass CheckTypesFilter(logging.Filter):                   \n    def filter(self, record):\n        return \"check_types\" not in record.getMessage()\n\n\nlogger.addFilter(CheckTypesFilter())\n\n\nSampling from the Bernouli distribution with \\(\\theta\\) = 0.7\n\nbernoulli_samples = tfp.distributions.Bernoulli(\n    probs=0.7\n)  # Create a Bernoulli distribution with p=0.7\nsamples = bernoulli_samples.sample(\n    sample_shape=100, seed=jax.random.PRNGKey(0)\n)  # Sample 100 samples from the distribution\nprint(samples)\n\nalpha = 3  # Set the parameter (alpha) of the Beta distribution\nbeta = 5  # Set the parameter (beta) of the Beta distribution\nsamples.sum()\n\n[1 0 0 1 1 0 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1\n 1 0 1 1 1 1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 1 1 0 1 0 0 1\n 1 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1]\n\n\nDeviceArray(69, dtype=int32)\n\n\n\n\nNegative log joint\n\ndef neg_logjoint(theta):  # Define the negative log-joint distribution\n    alpha = 3\n    beta = 5\n    dist_prior = tfp.distributions.Beta(alpha, beta)\n    dist_likelihood = tfp.distributions.Bernoulli(probs=theta)\n    return -(dist_prior.log_prob(theta) + dist_likelihood.log_prob(samples).sum())\n\n\n\nCalculating \\(\\theta_{map}\\) by minimising the negative log joint using gradient descent\n\ngradient = jax.value_and_grad(\n    jax.jit(neg_logjoint)\n)  # Define the gradient of the negative log-joint distribution\nlr = 0.001  # Set the learning rate\nepochs = 200  # Set the number of epochs\ntheta_map = 0.5  # Set the initial value of theta\nlosses = []\nfor i in trange(epochs):  # Run the optimization loop\n    val, grad = gradient(theta_map)\n    theta_map -= lr * grad\n    losses.append(val)\nplt.plot(losses)\nsns.despine()\ntheta_map\n\n100%|██████████| 200/200 [00:02<00:00, 71.83it/s] \n\n\nDeviceArray(0.6698113, dtype=float32, weak_type=True)\n\n\n\n\n\n\n\nVerification of obtained \\(\\theta_{map}\\) value using the formula:\n\n\n\\(\\theta_{map} = \\frac{n_h+\\alpha-1}{n_h+n_t+\\alpha+\\beta-2}\\)\n\nnH = samples.sum().astype(\"float32\")  # Compute the number of heads\nnT = (samples.size - nH).astype(\"float32\")  # Compute the number of tails\ntheta_check = (nH + alpha - 1) / (\n    nH + nT + alpha + beta - 2\n)  # Compute the posterior mean\ntheta_check\n\nDeviceArray(0.6698113, dtype=float32)\n\n\n\n\nComputing Hessian and Covariance\n\nhessian = jax.hessian(neg_logjoint)(\n    theta_map\n)  # Compute the Hessian of the negative log-joint distribution\nhessian = jnp.reshape(hessian, (1, 1))  # Reshape the Hessian to a 1x1 matrix\ncov = jnp.linalg.inv(hessian)  # Compute the covariance matrix\ncov\n\nDeviceArray([[0.00208645]], dtype=float32)\n\n\n\n\nPlots Comparing the distribution obtained using Laplace approximation with actual Beta Bernoulli posterior\n\n# Compute the Laplace approximation\nx = jnp.linspace(0, 1, 100)  # Create a grid of 100 points between 0 and 1\nx = x.reshape(-1, 1)  # Reshape the grid to a 100x1 matrix\nLaplace_Approx = tfp.distributions.MultivariateNormalFullCovariance(  # Create a multivariate normal distribution\n    loc=theta_map, covariance_matrix=cov\n)\nLaplace_Approx_pdf = Laplace_Approx.prob(\n    x\n)  # Compute the probability density function of the Laplace approximation\nplt.plot(x, Laplace_Approx_pdf, label=\"Laplace Approximation\")\n\n\n# Compute the true posterior distribution\nalpha = 3\nbeta = 5\ntrue_posterior = tfp.distributions.Beta(\n    alpha + nH, beta + nT\n)  # Create a Beta distribution\ntrue_posterior_pdf = true_posterior.prob(\n    x\n)  # Compute the probability density function of the true posterior\nplt.plot(x, true_posterior_pdf, label=\"True Posterior\")\nplt.xlim(0, 1)\nplt.legend()\n\n<matplotlib.legend.Legend at 0x7f2181895a10>\n\n\n\n\n\n\n# Compute the log-probability density function of the Laplace approximation\ntrue_posterior_pdf_log = true_posterior.log_prob(x)\nLaplace_Approx_pdf_log = Laplace_Approx.log_prob(x)\nplt.plot(x, Laplace_Approx_pdf_log, label=\"Laplace Approximation\")\nplt.plot(x, true_posterior_pdf_log, label=\"True Posterior\")\nplt.legend()\n\n<matplotlib.legend.Legend at 0x7f2180719250>"
  },
  {
    "objectID": "posts/2023-04-24-cp.html",
    "href": "posts/2023-04-24-cp.html",
    "title": "Conformal Prediction",
    "section": "",
    "text": "Guess the following images:\n\n\n\nimage.png\n\n\nPrediction set generated by conformal prediction for the images:\n\n\n\nimage.png\n\n\n\n\n\nUsing conformal prediction we aim to generate rigorous, finite sample confidence intervals for any model and any dataset. Unlike a point prediction from neural network, here we will get a confidence interval in which desired output is guaranteed to be.\n\n\n\n\nBegin with a fitted predicted model which we call \\(\\hat{f}\\).\nCreate a predicted set (set of possible labels) for this model using a small amount of calibration data."
  },
  {
    "objectID": "posts/2023-04-24-cp.html#given",
    "href": "posts/2023-04-24-cp.html#given",
    "title": "Conformal Prediction",
    "section": "Given",
    "text": "Given\n\nA calibration dataset \\(\\{(x_i,y_i)\\}_{i=1}^n\\) (This is the dataset that the model does not see during training).\nA \\(model\\) \\(\\hat{\\pi}(x) = P[Y=y|X=x]\\)\nA \\(new\\) \\(data\\) \\(point\\) \\(x_{n+1}\\) to test the model"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#goal",
    "href": "posts/2023-04-24-cp.html#goal",
    "title": "Conformal Prediction",
    "section": "Goal",
    "text": "Goal\nPredict a set \\(\\tau(X_{test})\\) for the data point \\(X_{test}\\) that is a subset of the label space \\(i.e.\\) predict a set, \\(\\tau(X_{test}) \\subseteq y\\). This set should contain the true class \\(Y_{test}\\) and should be valid in the following sense:\n$ 1 - P[Y_{test} (X_{test})] - + $\nhere \\(\\alpha\\) is a user chosen rate in \\(\\in [0,1]\\), \\(y\\) is the set of all labels & \\(n\\) is the number of points in calibration dataset. The above mentioned property is called Marginal Coverage."
  },
  {
    "objectID": "posts/2023-04-24-cp.html#objective-for-the-sets",
    "href": "posts/2023-04-24-cp.html#objective-for-the-sets",
    "title": "Conformal Prediction",
    "section": "Objective for the sets",
    "text": "Objective for the sets\n\nExact coverage\nSmall size\nSize of the set should indicate the difficulty of the examples \\(i.e.\\) Adaptivity"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#general-method-for-conformal-prediction",
    "href": "posts/2023-04-24-cp.html#general-method-for-conformal-prediction",
    "title": "Conformal Prediction",
    "section": "General Method for Conformal Prediction",
    "text": "General Method for Conformal Prediction\n\nIdentify a heuristic notion of uncertainity\nDefine a score function \\(S(x,y)\\) based on the values in step 1. In general large values of \\(S\\) corresponds to a bad fit between \\(x\\) \\(\\&\\) \\(y\\)\nCompute \\(\\hat{q} : \\frac{\\lceil{(n+1)(1-\\alpha)}\\rceil}{n}\\) quantile of \\(S(x,y)\\) on calibration dataset\nTo obtain the prediction set: \\(\\tau(x) = \\{y:S(x,y) \\le \\hat{q} \\}\\)"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#now-lets-implement-conformal-prediction",
    "href": "posts/2023-04-24-cp.html#now-lets-implement-conformal-prediction",
    "title": "Conformal Prediction",
    "section": "Now Lets’ implement conformal Prediction",
    "text": "Now Lets’ implement conformal Prediction\nA simpler version of the conformal prediction\n\nCompute \\(\\hat{q} : \\alpha\\) quantile of \\(S(x,y)\\) on calibration dataset where \\(S(x,y)\\) is the score function correspoding to the true label\nTo obtain the prediction set: \\(\\tau(x) = \\{y:S(x,y) \\ge \\hat{q} \\}\\)\n\n\ncalib_target_results = np.array(calib_target_results)\ncalib_prediction_results = np.array(calib_prediction_results)\ntest_prediction_results = np.array(test_prediction_results)\ntest_target_results = np.array(test_target_results)\n\ncalib_prediction_results.shape, calib_target_results.shape, test_prediction_results.shape, test_target_results.shape\n\n((5000, 10), (5000,), (5000, 10), (5000,))\n\n\n\ncalib_df = pd.DataFrame(calib_prediction_results)\ncalib_df[\"Max\"] = calib_df.max(axis=1)\ncalib_df[\"Max_idx\"] = calib_df.idxmax(axis=1)\ncalib_df[\"True_idx\"] = calib_target_results\ncalib_df\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      Max\n      Max_idx\n      True_idx\n    \n  \n  \n    \n      0\n      7.672552e-08\n      5.311417e-07\n      1.562821e-04\n      3.211690e-09\n      4.822823e-04\n      2.262360e-06\n      9.993560e-01\n      3.220139e-11\n      1.609646e-06\n      9.680530e-07\n      0.999356\n      6\n      6\n    \n    \n      1\n      7.041307e-08\n      1.779545e-07\n      6.658971e-06\n      4.084817e-07\n      6.008969e-08\n      1.122653e-08\n      1.417746e-04\n      1.310595e-09\n      9.998498e-01\n      9.002325e-07\n      0.999850\n      8\n      8\n    \n    \n      2\n      1.891271e-06\n      7.539936e-07\n      8.252732e-06\n      7.875642e-05\n      6.665982e-01\n      2.489255e-06\n      7.079141e-04\n      4.619782e-05\n      3.568919e-02\n      2.968663e-01\n      0.666598\n      4\n      5\n    \n    \n      3\n      3.600329e-08\n      4.196039e-09\n      4.928238e-06\n      3.145105e-09\n      9.909703e-01\n      3.594812e-08\n      2.783901e-05\n      7.394720e-06\n      8.526304e-07\n      8.988610e-03\n      0.990970\n      4\n      4\n    \n    \n      4\n      8.007726e-06\n      8.686094e-05\n      1.262506e-04\n      9.905047e-01\n      2.181237e-07\n      3.404921e-07\n      8.625836e-06\n      2.125504e-06\n      9.200612e-03\n      6.224329e-05\n      0.990505\n      3\n      3\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4995\n      3.017699e-06\n      8.860756e-05\n      3.417503e-04\n      9.827271e-01\n      5.802370e-05\n      1.595727e-06\n      2.064353e-04\n      2.161075e-06\n      1.435820e-02\n      2.213240e-03\n      0.982727\n      3\n      3\n    \n    \n      4996\n      5.440750e-13\n      9.999996e-01\n      7.675386e-08\n      5.033297e-11\n      2.031701e-11\n      4.493560e-11\n      7.547337e-10\n      3.736634e-08\n      2.838881e-07\n      3.246134e-12\n      1.000000\n      1\n      1\n    \n    \n      4997\n      5.372684e-09\n      3.440873e-09\n      1.484947e-07\n      9.999758e-01\n      2.131953e-12\n      4.374669e-11\n      2.115596e-12\n      2.734103e-06\n      2.123476e-05\n      9.234377e-08\n      0.999976\n      3\n      3\n    \n    \n      4998\n      1.966202e-07\n      6.421658e-07\n      5.014269e-05\n      2.109797e-09\n      2.172950e-05\n      5.110368e-07\n      9.999149e-01\n      3.196222e-10\n      3.617991e-06\n      8.205562e-06\n      0.999915\n      6\n      4\n    \n    \n      4999\n      2.777072e-14\n      1.000000e+00\n      1.977435e-08\n      3.481474e-11\n      2.748897e-12\n      9.301366e-12\n      5.802548e-11\n      3.565957e-08\n      2.786610e-08\n      1.873916e-12\n      1.000000\n      1\n      1\n    \n  \n\n5000 rows × 13 columns\n\n\n\n\ntest_df = pd.DataFrame(test_prediction_results)\ntest_df[\"Max\"] = test_df.max(axis=1)\ntest_df[\"Max_idx\"] = test_df.idxmax(axis=1)\ntest_df[\"True_idx\"] = test_target_results\ntest_df\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      Max\n      Max_idx\n      True_idx\n    \n  \n  \n    \n      0\n      1.507169e-09\n      6.793355e-10\n      9.392306e-10\n      3.272889e-09\n      4.279739e-09\n      1.000421e-10\n      7.060916e-13\n      9.973305e-01\n      3.673427e-07\n      2.669133e-03\n      0.997331\n      7\n      7\n    \n    \n      1\n      1.528662e-08\n      4.265159e-12\n      3.008223e-05\n      9.999698e-01\n      1.717640e-15\n      2.861857e-14\n      1.901743e-12\n      4.749006e-13\n      8.433129e-08\n      6.817440e-14\n      0.999970\n      3\n      3\n    \n    \n      2\n      1.440134e-10\n      3.157558e-06\n      2.407116e-05\n      5.108404e-11\n      5.610714e-07\n      1.101829e-08\n      9.999588e-01\n      4.209422e-15\n      1.334558e-05\n      3.933881e-10\n      0.999959\n      6\n      6\n    \n    \n      3\n      6.468001e-12\n      9.999986e-01\n      3.110969e-07\n      3.365797e-09\n      3.275069e-11\n      3.477734e-10\n      1.458348e-08\n      3.999051e-08\n      1.144535e-06\n      1.596769e-10\n      0.999999\n      1\n      1\n    \n    \n      4\n      8.815193e-05\n      6.341890e-03\n      8.312734e-04\n      1.951014e-04\n      1.125594e-02\n      2.372148e-04\n      7.425601e-03\n      1.311864e-03\n      1.279543e-02\n      9.595175e-01\n      0.959518\n      9\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      4995\n      2.418953e-08\n      7.203251e-08\n      1.530548e-07\n      2.897828e-06\n      5.851566e-07\n      6.657368e-09\n      3.703725e-08\n      6.012499e-05\n      9.920814e-01\n      7.854681e-03\n      0.992081\n      8\n      8\n    \n    \n      4996\n      4.415281e-09\n      1.504091e-08\n      2.217878e-06\n      9.999076e-01\n      1.170547e-09\n      1.767450e-10\n      1.133458e-08\n      1.103373e-09\n      8.993938e-05\n      2.646218e-07\n      0.999908\n      3\n      3\n    \n    \n      4997\n      1.863301e-18\n      3.640452e-17\n      5.301770e-13\n      5.253428e-15\n      9.999909e-01\n      7.949940e-15\n      1.362663e-11\n      6.954227e-13\n      6.574446e-12\n      9.051804e-06\n      0.999991\n      4\n      4\n    \n    \n      4998\n      6.859559e-17\n      7.214033e-16\n      3.279532e-11\n      1.938939e-14\n      9.999964e-01\n      1.438514e-13\n      1.612270e-10\n      2.956339e-12\n      7.959585e-12\n      3.579523e-06\n      0.999996\n      4\n      4\n    \n    \n      4999\n      2.643393e-01\n      7.046102e-07\n      1.252546e-02\n      5.733218e-01\n      1.109647e-07\n      3.844558e-07\n      2.375773e-02\n      1.729390e-07\n      1.260542e-01\n      1.263923e-07\n      0.573322\n      3\n      5\n    \n  \n\n5000 rows × 13 columns"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#intuitive-understanding",
    "href": "posts/2023-04-24-cp.html#intuitive-understanding",
    "title": "Conformal Prediction",
    "section": "Intuitive understanding",
    "text": "Intuitive understanding\n\nstds_cal = np.std(calib_prediction_results, axis=1)\nmin_std_indices_cal = np.argsort(stds_cal)\n\nSorting based on std deviation in the rows\n\ncalib_df_std = calib_df.loc[min_std_indices_cal]\ncalib_df_std\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      Max\n      Max_idx\n      True_idx\n    \n  \n  \n    \n      4792\n      2.204627e-01\n      1.263805e-02\n      1.064651e-01\n      2.497595e-02\n      3.831481e-02\n      1.915999e-02\n      2.428759e-01\n      4.884591e-02\n      2.138946e-01\n      7.236703e-02\n      0.242876\n      6\n      5\n    \n    \n      3635\n      3.720535e-03\n      3.984575e-02\n      6.415164e-02\n      8.764555e-02\n      3.574266e-01\n      1.044143e-02\n      2.420991e-02\n      2.146130e-01\n      4.631169e-02\n      1.516339e-01\n      0.357427\n      4\n      6\n    \n    \n      1115\n      1.880663e-02\n      2.226060e-01\n      8.889224e-02\n      6.196426e-02\n      1.060972e-02\n      5.382521e-03\n      2.736638e-01\n      7.305532e-03\n      2.858033e-01\n      2.496605e-02\n      0.285803\n      8\n      5\n    \n    \n      1031\n      1.033852e-01\n      5.177050e-02\n      7.211524e-02\n      1.307259e-01\n      8.214290e-03\n      5.626875e-03\n      2.568235e-01\n      5.283331e-03\n      3.498454e-01\n      1.620973e-02\n      0.349845\n      8\n      5\n    \n    \n      1778\n      7.243351e-02\n      5.959544e-05\n      1.995622e-01\n      1.425000e-05\n      2.422987e-01\n      4.558027e-04\n      1.450675e-01\n      8.497129e-03\n      4.330557e-04\n      3.311783e-01\n      0.331178\n      9\n      2\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2909\n      1.735541e-15\n      2.001958e-12\n      8.669379e-16\n      1.821178e-15\n      2.716592e-15\n      2.300831e-16\n      2.615356e-20\n      1.000000e+00\n      8.539057e-13\n      3.396687e-09\n      1.000000\n      7\n      7\n    \n    \n      2914\n      1.000000e+00\n      5.918221e-19\n      1.986233e-10\n      1.237661e-14\n      4.863426e-19\n      3.770102e-16\n      1.504733e-11\n      7.523226e-09\n      1.627343e-10\n      1.057123e-13\n      1.000000\n      0\n      0\n    \n    \n      2920\n      1.139901e-11\n      6.290391e-12\n      4.389559e-08\n      1.000000e+00\n      4.736745e-17\n      5.172185e-15\n      1.662083e-15\n      2.492923e-11\n      5.069354e-10\n      1.366577e-12\n      1.000000\n      3\n      3\n    \n    \n      2847\n      2.374335e-11\n      5.410563e-10\n      1.000000e+00\n      6.474658e-10\n      3.318972e-12\n      1.285993e-12\n      1.194038e-08\n      1.259493e-15\n      1.686373e-10\n      9.267352e-15\n      1.000000\n      2\n      2\n    \n    \n      4999\n      2.777072e-14\n      1.000000e+00\n      1.977435e-08\n      3.481474e-11\n      2.748897e-12\n      9.301366e-12\n      5.802548e-11\n      3.565957e-08\n      2.786610e-08\n      1.873916e-12\n      1.000000\n      1\n      1\n    \n  \n\n5000 rows × 13 columns\n\n\n\n\ny1 = calib_prediction_results[min_std_indices_cal[0]]\ny2 = calib_prediction_results[min_std_indices_cal[1]]\ny3 = calib_prediction_results[min_std_indices_cal[2]]\ny4 = calib_prediction_results[4500]\n\nx = np.arange(10)\n\n\nfig, axs = plt.subplots(2, 2, figsize=(8, 6))\n\n# Add bar plots to the subplots\nbars1 = axs[0, 0].bar(x, y1, color=\"#ff7f0e\", width=0.6)\naxs[0, 0].set_title(\n    f\"True Label: {calib_target_results[min_std_indices_cal[0]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars2 = axs[0, 1].bar(x, y2, color=\"#2ca02c\", width=0.6)\naxs[0, 1].set_title(\n    f\"True Label: {calib_target_results[min_std_indices_cal[1]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars3 = axs[1, 0].bar(x, y3, color=\"#1f77b4\", width=0.6)\naxs[1, 0].set_title(\n    f\"True Label: {calib_target_results[min_std_indices_cal[2]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars4 = axs[1, 1].bar(x, y4, color=\"#d62728\", width=0.6)\naxs[1, 1].set_title(\n    f\"True Label: {calib_target_results[4500]}\", fontsize=12, fontweight=\"bold\"\n)\n\n# Add labels and title to the figure\nfig.suptitle(\"Model's output on calibration dataset\", fontsize=14, fontweight=\"bold\")\n\nfor ax in axs.flat:\n    ax.grid(color=\"gray\", linestyle=\"--\", linewidth=0.5)\n\n# Fine-tune the subplot layout\nfig.tight_layout(rect=[0, 0.03, 1, 0.95])\n\nbars1[calib_target_results[min_std_indices_cal[0]]].set_color(\"#9467bd\")\nbars2[calib_target_results[min_std_indices_cal[1]]].set_color(\"#9467bd\")\nbars3[calib_target_results[min_std_indices_cal[2]]].set_color(\"#9467bd\")\nbars4[calib_target_results[4500]].set_color(\"#9467bd\")\n\n\n\n\n\ncalib_true = calib_prediction_results[\n    np.arange(calib_prediction_results.shape[0]), calib_target_results\n]\n\nFrom the above plot it is evident that most of the softmax outputs corresponding to the true label are either close to 1 or close to 0. Thus, once we find out the value corresponding to the threshold of the 0 peak in the plot. Any quantile value just above this will quickly go near the next peak as there is no distribution mass for the rest of the softmax outputs.\n\n## Quantile value that we use to predict the prediction set\nqhat_intuit = np.quantile(calib_true, 0.15)  ## taking 15% quantile\nqhat_intuit\n\n0.17026243805885327\n\n\n_This leads to the fact that 85% of examples have their true class softmax score above \\(\\hat{q}_{intuit}\\)_\nSorting the test dataset according to std\n\nstds_test = np.std(test_prediction_results, axis=1)\nmin_std_indices_test = np.argsort(stds_test)\n\n\ntest_df_std = test_df.loc[min_std_indices_test]\ntest_df_std\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      Max\n      Max_idx\n      True_idx\n    \n  \n  \n    \n      1646\n      9.070086e-06\n      7.102170e-02\n      1.074573e-01\n      2.019677e-01\n      2.011996e-01\n      1.028181e-03\n      1.132987e-03\n      1.039726e-01\n      1.606203e-01\n      1.515905e-01\n      0.201968\n      3\n      8\n    \n    \n      1184\n      4.843292e-08\n      1.841913e-01\n      5.504493e-02\n      1.019774e-01\n      1.562013e-01\n      2.759257e-04\n      9.354739e-04\n      1.538243e-01\n      1.096576e-02\n      3.365835e-01\n      0.336583\n      9\n      7\n    \n    \n      3654\n      4.213768e-04\n      7.209036e-02\n      1.887893e-02\n      1.189776e-02\n      3.334404e-01\n      2.851049e-03\n      1.309165e-01\n      8.140079e-04\n      2.165484e-01\n      2.121412e-01\n      0.333440\n      4\n      5\n    \n    \n      3019\n      2.256842e-01\n      2.321515e-07\n      2.911193e-01\n      2.409384e-01\n      1.869016e-11\n      2.536230e-09\n      5.548395e-02\n      2.447040e-10\n      1.867739e-01\n      2.661302e-11\n      0.291119\n      2\n      5\n    \n    \n      4896\n      1.610583e-01\n      4.679085e-05\n      8.821968e-04\n      1.386619e-01\n      1.308930e-03\n      8.392150e-05\n      3.836229e-02\n      5.723350e-02\n      2.713310e-01\n      3.310311e-01\n      0.331031\n      9\n      5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      3128\n      1.000000e+00\n      4.840718e-18\n      1.905646e-08\n      2.940498e-11\n      1.603996e-18\n      5.580763e-16\n      4.068423e-11\n      1.949603e-11\n      2.676126e-09\n      3.716259e-15\n      1.000000\n      0\n      0\n    \n    \n      4507\n      1.798757e-18\n      1.045387e-13\n      5.538239e-17\n      2.234547e-16\n      7.610493e-18\n      6.503045e-19\n      4.574509e-24\n      1.000000e+00\n      1.466630e-14\n      1.054316e-12\n      1.000000\n      7\n      7\n    \n    \n      3130\n      5.435448e-18\n      5.444775e-11\n      1.383103e-15\n      2.973889e-15\n      2.213195e-15\n      1.832753e-16\n      7.384352e-22\n      1.000000e+00\n      3.005146e-12\n      3.994342e-10\n      1.000000\n      7\n      7\n    \n    \n      3142\n      1.000000e+00\n      2.979347e-17\n      1.458575e-08\n      1.863164e-11\n      1.070295e-18\n      1.046285e-15\n      7.635514e-11\n      2.087787e-12\n      5.457018e-09\n      3.388109e-15\n      1.000000\n      0\n      0\n    \n    \n      3060\n      1.986817e-17\n      5.229983e-14\n      1.823637e-17\n      3.066719e-17\n      1.413327e-16\n      2.220211e-18\n      7.849721e-23\n      1.000000e+00\n      4.188006e-14\n      2.416875e-10\n      1.000000\n      7\n      7\n    \n  \n\n5000 rows × 13 columns\n\n\n\n\n## Forming prediction sets\n\ny1 = test_prediction_results[min_std_indices_test[1]]\ny2 = test_prediction_results[min_std_indices_test[2]]\ny3 = test_prediction_results[min_std_indices_test[3]]\ny4 = test_prediction_results[4500]\n\ntest_array_indices = [\n    min_std_indices_test[1],\n    min_std_indices_test[2],\n    min_std_indices_test[3],\n    4500,\n]\n\nx = np.arange(10)\n\n# Create a new figure with 3 subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Add bar plots to the subplots\nbars1 = axs[0, 0].bar(x, y1, color=\"#ff7f0e\", width=0.6)\naxs[0, 0].set_title(\n    f\"True Label: {test_target_results[test_array_indices[0]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars2 = axs[0, 1].bar(x, y2, color=\"#2ca02c\", width=0.6)\naxs[0, 1].set_title(\n    f\"True Label: {test_target_results[test_array_indices[1]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars3 = axs[1, 0].bar(x, y3, color=\"#1f77b4\", width=0.6)\naxs[1, 0].set_title(\n    f\"True Label: {test_target_results[test_array_indices[2]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\nbars4 = axs[1, 1].bar(x, y4, color=\"#d62728\", width=0.6)\naxs[1, 1].set_title(\n    f\"True Label: {test_target_results[test_array_indices[3]]}\",\n    fontsize=12,\n    fontweight=\"bold\",\n)\n\n# Add labels and title to the figure\nfig.suptitle(\"Model's output on test dataset\", fontsize=14, fontweight=\"bold\")\n\nfor ax in axs.flat:\n    ax.grid(color=\"gray\", linestyle=\"--\", linewidth=0.5)\n\nfor ax in axs.flatten():\n    ax.axhline(y=qhat_intuit, color=\"black\", linewidth=2)\n\n# Fine-tune the subplot layout\nfig.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n\nbars1_idx = y1 > qhat_intuit\nbars2_idx = y2 > qhat_intuit\nbars3_idx = y3 > qhat_intuit\nbars4_idx = y4 > qhat_intuit\n\nfor i in range(10):\n    if bars1_idx[i]:\n        bars1[i].set_color(\"#8c564b\")\n    if bars2_idx[i]:\n        bars2[i].set_color(\"#8c564b\")\n    if bars3_idx[i]:\n        bars3[i].set_color(\"#8c564b\")\n    if bars4_idx[i]:\n        bars4[i].set_color(\"#8c564b\")\n\nbars1[test_target_results[test_array_indices[0]]].set_color(\"#9467bd\")\nbars2[test_target_results[test_array_indices[1]]].set_color(\"#9467bd\")\nbars3[test_target_results[test_array_indices[2]]].set_color(\"#9467bd\")\nbars4[test_target_results[test_array_indices[3]]].set_color(\"#9467bd\")\n\n\n\n\n_All the bars above the \\(\\hat{q}_{intuit}\\) are the part of the prediction set for the corresponding test dataset_\n\n# Use numpy indexing to get the softmax scores for each image corresponding to their true labels\ntest_true = test_prediction_results[\n    np.arange(test_prediction_results.shape[0]), test_target_results\n]"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#implementing-conformal-prediction-using-the-general-method",
    "href": "posts/2023-04-24-cp.html#implementing-conformal-prediction-using-the-general-method",
    "title": "Conformal Prediction",
    "section": "Implementing conformal prediction using the General Method",
    "text": "Implementing conformal prediction using the General Method\n1. Here the heuristic notion of uncertainity is softmax output\n\n# Problem setup\nn = 5000  # number of calibration points\nalpha = 0.15  # 1-alpha is the desired coverage\n\n\ncal_scores = 1 - calib_true\n\n2. Defining the score function as: \\(S(x,y)\\) = \\(1- softmax(x_i,y_i)\\)\n\nq_level = np.ceil((n + 1) * (1 - alpha)) / n  ## alpha = 0.1, n = 1000, q_level = 0.901\nqhat = np.quantile(\n    cal_scores, q_level\n)  ## value for which 90% of the scores are less than it\nqhat\n\n0.8337927011847496\n\n\n3. Calculating \\(\\hat{q}\\)\n4. Creating the prediction set\n$ C(x) = {y:S(x,y) }$\n\nfig = plt.figure()\nfor i in range(4):\n    plt.subplot(2, 2, i + 1)\n    plt.imshow(test_images[test_array_indices[i]][0], cmap=\"gray\", interpolation=\"none\")\n    test_scores = 1 - test_prediction_results[test_array_indices[i]]\n    prediction_set = test_scores < qhat\n    indices = []\n    for index, val in enumerate(prediction_set):\n        if val:\n            indices.append(index)\n\n    true_label = test_target_results[test_array_indices]\n\n    plt.title(f\"Set: {indices} True:{true_label[i]}\")\n    plt.xticks([])\n    plt.yticks([])"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#insights-and-summary",
    "href": "posts/2023-04-24-cp.html#insights-and-summary",
    "title": "Conformal Prediction",
    "section": "Insights and Summary:",
    "text": "Insights and Summary:\n\nGiven an image \\(x\\) and label \\(j\\). Softmax measures \\(P(Y = j | X = x)\\). However, we have no guarantee that the softmax outputs are any good; they maybe arbitrarily overfit or otherwise untrustworthy. Thus, we use the holdout set to adjust for their deficiencies.\nIn the above example the holdout set contained 5000 examples that the model never saw during training which gives us an honest appraisal of its performance.\nHere, the conformal score was 1 - softmax output of the true class. Then we took $ = 1 - $ quantile of the scores.\nUsing Step 3 at the test time, we got the softmax outputs of a new image \\(X_{test}\\) and collected all classes with outputs above $ 1 − $ into a prediction set \\(C(X_{test})\\)\n\n\nImplementation using Imagenet\n\nif not os.path.exists(\"../data\"):\n    os.system(\"gdown 1h7S6N_Rx7gdfO3ZunzErZy6H7620EbZK -O ../data.tar.gz\")\n    os.system(\"tar -xf ../data.tar.gz -C ../\")\n    os.system(\"rm ../data.tar.gz\")\nif not os.path.exists(\"../data/imagenet/human_readable_labels.json\"):\n    !wget -nv -O ../data/imagenet/human_readable_labels.json -L https://raw.githubusercontent.com/anishathalye/imagenet-simple-labels/master/imagenet-simple-labels.json\n\ndata = np.load(\"../data/imagenet/imagenet-resnet152.npz\")\nexample_paths = os.listdir(\"../data/imagenet/examples\")\nsmx = data[\"smx\"]\nlabels = data[\"labels\"].astype(int)\n\n\n# Problem setup\nn = 1000  # number of calibration points\nalpha = 0.1  # 1-alpha is the desired coverage\n\n\nidx = np.array([1] * n + [0] * (smx.shape[0] - n)) > 0\nnp.random.shuffle(idx)\ncal_smx, val_smx = smx[idx, :], smx[~idx, :]\ncal_labels, val_labels = labels[idx], labels[~idx]\n\n\nimagenet_calib_df = pd.DataFrame(cal_smx)\nimagenet_calib_df\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      990\n      991\n      992\n      993\n      994\n      995\n      996\n      997\n      998\n      999\n    \n  \n  \n    \n      0\n      9.646587e-01\n      1.350361e-05\n      2.151330e-07\n      1.699551e-06\n      2.384544e-06\n      1.646308e-06\n      1.394906e-07\n      2.117511e-08\n      3.057390e-09\n      4.086660e-10\n      ...\n      5.279725e-09\n      9.462966e-08\n      1.185813e-08\n      5.307772e-10\n      2.161666e-07\n      1.007043e-08\n      9.514928e-08\n      8.144019e-07\n      1.339111e-07\n      6.878381e-09\n    \n    \n      1\n      9.992527e-01\n      1.005275e-06\n      5.030975e-08\n      2.312540e-08\n      6.919812e-07\n      5.068674e-08\n      5.945228e-08\n      2.580266e-09\n      1.059923e-09\n      5.929557e-11\n      ...\n      3.178681e-10\n      3.120479e-09\n      2.160190e-09\n      6.229624e-10\n      3.004631e-08\n      2.982520e-10\n      3.827619e-08\n      2.310420e-07\n      9.114003e-08\n      6.513726e-10\n    \n    \n      2\n      9.998410e-01\n      2.081634e-08\n      2.163244e-09\n      1.033369e-08\n      9.947884e-09\n      4.689700e-09\n      4.500399e-09\n      4.603104e-11\n      2.665861e-11\n      4.032333e-12\n      ...\n      1.170430e-10\n      1.740400e-10\n      1.001514e-10\n      2.484425e-11\n      6.860166e-10\n      5.098253e-11\n      9.393597e-10\n      3.404014e-08\n      1.460277e-09\n      8.657306e-13\n    \n    \n      3\n      9.996231e-01\n      6.980400e-06\n      7.547856e-08\n      1.445374e-07\n      5.570853e-07\n      1.413495e-06\n      1.172659e-07\n      4.219434e-09\n      9.644072e-10\n      4.150972e-11\n      ...\n      1.467458e-09\n      1.727905e-08\n      4.188708e-08\n      8.764998e-10\n      3.017675e-08\n      1.152834e-09\n      2.212167e-08\n      5.312061e-07\n      7.742039e-09\n      6.035842e-10\n    \n    \n      4\n      3.740840e-07\n      9.997242e-01\n      6.791072e-10\n      4.707819e-09\n      3.942747e-09\n      3.235905e-07\n      1.922253e-08\n      7.563041e-09\n      4.848560e-09\n      1.836324e-11\n      ...\n      1.428742e-09\n      2.168828e-09\n      7.591582e-10\n      7.432400e-11\n      8.145293e-10\n      6.436701e-10\n      6.601004e-10\n      2.608228e-10\n      1.372821e-09\n      1.686885e-07\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      995\n      1.338609e-13\n      2.481204e-13\n      2.981873e-12\n      2.992094e-12\n      8.025680e-13\n      1.196738e-12\n      1.058158e-12\n      1.031028e-14\n      8.366420e-14\n      1.834110e-16\n      ...\n      2.835526e-10\n      1.185883e-09\n      5.707088e-11\n      1.053065e-10\n      6.115803e-09\n      1.000000e+00\n      6.104551e-11\n      3.662891e-10\n      2.519912e-13\n      1.617798e-11\n    \n    \n      996\n      1.461727e-05\n      2.962031e-05\n      2.201413e-07\n      3.813796e-08\n      1.196295e-07\n      3.246882e-07\n      2.723306e-06\n      2.824044e-06\n      9.639041e-06\n      2.289236e-05\n      ...\n      2.566843e-02\n      1.156482e-01\n      1.163806e-03\n      6.741311e-03\n      1.174134e-03\n      1.015575e-03\n      4.271199e-01\n      3.027194e-01\n      3.415058e-04\n      8.422194e-07\n    \n    \n      997\n      3.484188e-06\n      1.047919e-07\n      7.475886e-08\n      3.465406e-07\n      1.347377e-06\n      4.767327e-06\n      4.182576e-08\n      4.709841e-08\n      1.508235e-08\n      1.065061e-08\n      ...\n      2.632773e-06\n      2.174731e-05\n      3.774206e-04\n      1.449335e-04\n      8.616778e-01\n      8.140442e-05\n      1.180090e-04\n      1.335993e-01\n      7.427732e-06\n      3.561391e-08\n    \n    \n      998\n      7.082336e-04\n      2.196637e-05\n      1.516250e-05\n      7.714512e-04\n      1.190577e-01\n      5.289520e-02\n      3.330159e-04\n      1.690781e-07\n      1.402206e-06\n      4.881958e-08\n      ...\n      1.218608e-05\n      2.880947e-03\n      5.116140e-04\n      1.090989e-01\n      8.638866e-03\n      3.532250e-02\n      1.301925e-02\n      5.380661e-01\n      1.777594e-05\n      4.036425e-07\n    \n    \n      999\n      4.129702e-14\n      2.889617e-12\n      2.798768e-13\n      4.931771e-13\n      2.598153e-12\n      9.916586e-14\n      3.006582e-13\n      8.608723e-12\n      2.060572e-12\n      5.938183e-13\n      ...\n      1.010096e-11\n      1.221625e-11\n      2.120370e-11\n      2.549839e-13\n      5.645862e-10\n      5.007978e-11\n      3.019627e-10\n      1.544346e-11\n      1.280130e-11\n      9.915479e-01\n    \n  \n\n1000 rows × 1000 columns"
  },
  {
    "objectID": "posts/2023-04-24-cp.html#adaptive-prediction-sets",
    "href": "posts/2023-04-24-cp.html#adaptive-prediction-sets",
    "title": "Conformal Prediction",
    "section": "Adaptive Prediction Sets",
    "text": "Adaptive Prediction Sets\nIn comparison to the earlier method:\n\nThis method will have a larger predictive set size.\nMuch more adaptive (\\(i.e.\\) Larger set size for hard examples and small set size for easy examples).\nThe earlier method used the softmax value corresponding to only the true class of the output.\n\n\nImplementation\n\nif not os.path.exists(\"../data\"):\n    os.system(\"gdown 1h7S6N_Rx7gdfO3ZunzErZy6H7620EbZK -O ../data.tar.gz\")\n    os.system(\"tar -xf ../data.tar.gz -C ../\")\n    os.system(\"rm ../data.tar.gz\")\nif not os.path.exists(\"../data/imagenet/human_readable_labels.json\"):\n    !wget -nv -O ../data/imagenet/human_readable_labels.json -L https://raw.githubusercontent.com/anishathalye/imagenet-simple-labels/master/imagenet-simple-labels.json\n\ndata = np.load(\"../data/imagenet/imagenet-resnet152.npz\")\nexample_paths = os.listdir(\"../data/imagenet/examples\")\nsmx = data[\"smx\"]\nlabels = data[\"labels\"].astype(int)\n\n\n# Problem setup\nn = 1000  # number of calibration points\nalpha = 0.1  # 1-alpha is the desired coverage\n\n\nidx = np.array([1] * n + [0] * (smx.shape[0] - n)) > 0\nnp.random.shuffle(idx)\ncal_smx, val_smx = smx[idx, :], smx[~idx, :]\ncal_labels, val_labels = labels[idx], labels[~idx]\n\n\ncal_pi = cal_smx.argsort(1)[\n    :, ::-1\n]  ## sorting the cal_smx in descending order and storing the indices in cal_pi\ncal_srt = np.take_along_axis(cal_smx, cal_pi, axis=1).cumsum(\n    axis=1\n)  ##  take the elements of 'cal_smx' corresponding to the indices in 'cal_pi' and take the cumulative sum along each row\ncal_scores = np.take_along_axis(cal_srt, cal_pi.argsort(axis=1), axis=1)[\n    range(n), cal_labels\n]  ##  take the elements of 'cal_srt' corresponding to the indices of the sorted 'cal_pi' and select the score corresponding to the 'cal_labels'\n\n\nexample = np.array(\n    [\n        [3, 4, 2, 1, 6],\n        [5, 4, 6, 7, 3],\n        [9, 5, 4, 3, 7],\n        [5, 4, 3, 7, 8],\n        [0, 3, 2, 1, 6],\n    ]\n)\nexample_labels = np.array([2, 3, 1, 4, 2])\n\nexample_pi = example.argsort(1)[:, ::-1]\nprint(example_pi)\n\nexample_srt = np.take_along_axis(example, example_pi, axis=1).cumsum(axis=1)\nprint(example_srt)\n\nexample_scores = np.take_along_axis(example_srt, example_pi.argsort(axis=1), axis=1)\nprint(example_scores)\n\nexample_scores[range(5), example_labels]\n\n[[4 1 0 2 3]\n [3 2 0 1 4]\n [0 4 1 2 3]\n [4 3 0 1 2]\n [4 1 2 3 0]]\n[[ 6 10 13 15 16]\n [ 7 13 18 22 25]\n [ 9 16 21 25 28]\n [ 8 15 20 24 27]\n [ 6  9 11 12 12]]\n[[13 10 15 16  6]\n [18 22 13  7 25]\n [ 9 21 25 28 16]\n [20 24 27 15  8]\n [12  9 11 12  6]]\n\n\narray([15,  7, 21,  8, 11])\n\n\n\n# example = np.array([[3,4,2,1,6],[5,4,6,7,3],[9,5,4,3,7],[5,4,3,7,8],[0,3,2,1,6]])\n# example_pi = example.sort()\n# print(example_pi)\n\n1. The softmax output corresponding to an image is sorted in decreasing order. Then we consider the \\(E_i\\) as the total mass of the softmax function for a particular label until we reach the true label.\n\n# Get the score quantile\nqhat = np.quantile(cal_scores, np.ceil((n + 1) * (1 - alpha)) / n)\nqhat\n\n0.9998794758319854\n\n\n2. Calculating the quantile value \\(\\hat{q}\\)\n\n# Deploy (output=list of length n, each element is tensor of classes)\nval_pi = val_smx.argsort(1)[:, ::-1]\nval_srt = np.take_along_axis(val_smx, val_pi, axis=1).cumsum(axis=1)\nprediction_sets = np.take_along_axis(val_srt <= qhat, val_pi.argsort(axis=1), axis=1)\n\n\neg = np.array([7, 5, 4, 3, 2, 1, 4, 3, 6, 7])\neg_pi = eg.argsort()[::-1]\neg_srt = np.take_along_axis(eg, eg_pi, axis=0).cumsum()\np_set = np.take_along_axis(eg_srt <= 0.8, eg_pi.argsort(), axis=0)\n\n\nimg = smx[1][0:10]\nimg_pi = img.argsort()[::-1]\nimg_srt = np.take_along_axis(img, img_pi, axis=0).cumsum()\nprediction_set = np.take_along_axis(img_srt <= qhat, img_pi.argsort(), axis=0)\nprint(img_pi, img, img_srt, prediction_set)\n\n[0 1 4 3 5 2 6 7 8 9] [9.64658678e-01 1.35036071e-05 2.15132957e-07 1.69955081e-06\n 2.38454436e-06 1.64630808e-06 1.39490609e-07 2.11751061e-08\n 3.05739034e-09 4.08666018e-10] [0.96465868 0.96467218 0.96467457 0.96467627 0.96467791 0.96467813\n 0.96467827 0.96467829 0.96467829 0.96467829] [ True  True  True  True  True  True  True  True  True  True]\n\n\n\nwith open(\"../data/imagenet/human_readable_labels.json\") as f:\n    label_strings = np.array(json.load(f))\n\nexample_paths = os.listdir(\"../data/imagenet/examples\")\nfor i in range(10):\n    rand_path = np.random.choice(example_paths)\n    img = imread(\"../data/imagenet/examples/\" + rand_path)\n    img_index = int(rand_path.split(\".\")[0])\n    img_pi = smx[img_index].argsort()[::-1]\n    img_srt = np.take_along_axis(smx[img_index], img_pi, axis=0).cumsum()\n    prediction_set = np.take_along_axis(img_srt <= qhat, img_pi.argsort(), axis=0)\n    plt.figure()\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()\n    print(f\"The prediction set is: {list(label_strings[prediction_set])}\")\n\n\n\n\nThe prediction set is: ['prairie grouse', 'partridge', 'Afghan Hound', 'Otterhound', 'Bedlington Terrier', 'Kerry Blue Terrier', 'Giant Schnauzer', 'Flat-Coated Retriever', 'Curly-coated Retriever', 'Chesapeake Bay Retriever', 'German Shorthaired Pointer', 'Vizsla', 'Irish Setter', 'Gordon Setter', 'Brittany', 'Clumber Spaniel', 'English Springer Spaniel', 'Welsh Springer Spaniel', 'Cocker Spaniels', 'Sussex Spaniel', 'Irish Water Spaniel', 'Australian Kelpie', 'Komondor', 'Newfoundland', 'Toy Poodle', 'Miniature Poodle', 'Standard Poodle', 'hyena', 'leopard', 'cheetah', 'brown bear', 'American black bear', 'mongoose', 'wild boar', 'bison', 'ram', 'llama', 'weasel', 'mink', 'guenon', 'baboon', 'honeycomb', 'jeep', 'wig', 'acorn', 'gyromitra']\n\n\n\n\n\nThe prediction set is: ['Otterhound', 'Border Terrier', 'Norfolk Terrier', 'Norwich Terrier', 'Yorkshire Terrier', 'Wire Fox Terrier', 'Lakeland Terrier', 'Airedale Terrier', 'Cairn Terrier', 'Australian Terrier', 'Dandie Dinmont Terrier', 'Miniature Schnauzer', 'Standard Schnauzer', 'Scottish Terrier', 'Australian Silky Terrier', 'German Shepherd Dog']\n\n\n\n\n\nThe prediction set is: ['goldfish', 'tiger shark', 'cock', 'house finch', 'agama', 'triceratops', 'ring-necked snake', 'sea snake', 'southern black widow', 'centipede', 'black grouse', 'prairie grouse', 'grey parrot', 'macaw', 'lorikeet', 'hornbill', 'hummingbird', 'toucan', 'flatworm', 'nematode', 'sea slug', 'fiddler crab', 'American lobster', 'spiny lobster', 'crayfish', 'hermit crab', 'isopod', 'crane (bird)', 'oystercatcher', 'Bloodhound', 'Miniature Schnauzer', 'Giant Schnauzer', 'Standard Schnauzer', 'Labrador Retriever', 'English Setter', 'Gordon Setter', 'Brittany', 'Cocker Spaniels', 'Sussex Spaniel', 'Rottweiler', 'Greater Swiss Mountain Dog', 'Dalmatian', 'cougar', 'tiger', 'polar bear', 'mongoose', 'ladybug', 'stick insect', 'cockroach', 'leafhopper', 'damselfly', 'red admiral', 'gossamer-winged butterfly', 'sea cucumber', 'hamster', 'beaver', 'guinea pig', 'pig', 'weasel', 'mink', 'European polecat', 'black-footed ferret', 'skunk', 'badger', 'macaque', 'marmoset', 'red panda', 'eel', 'coho salmon', 'rock beauty', 'clownfish', 'sturgeon', 'garfish', 'lionfish', 'aircraft carrier', 'airliner', 'airship', 'ambulance', 'amphibious vehicle', 'analog clock', 'apiary', 'waste container', 'assault rifle', 'backpack', 'balance beam', 'balloon', 'Band-Aid', 'baluster', 'barber chair', 'barbershop', 'barometer', 'barrel', 'wheelbarrow', 'baseball', 'swimming cap', 'bathtub', 'station wagon', 'lighthouse', 'beaker', 'beer bottle', 'binoculars', 'birdhouse', 'boathouse', 'bolo tie', 'bottle cap', 'breakwater', 'broom', 'buckle', 'bulletproof vest', 'high-speed train', 'taxicab', 'cannon', 'canoe', 'can opener', 'car mirror', 'carousel', 'tool kit', 'car wheel', 'automated teller machine', 'cassette', 'cassette player', 'catamaran', 'CD player', 'mobile phone', 'chain', 'chain-link fence', 'chainsaw', 'movie theater', 'coffeemaker', 'computer keyboard', 'container ship', 'convertible', 'cowboy hat', 'crane (machine)', 'crash helmet', 'crate', 'crutch', 'dam', 'desk', 'desktop computer', 'rotary dial telephone', 'digital clock', 'digital watch', 'dishwasher', 'disc brake', 'dock', 'dog sled', 'drilling rig', 'dumbbell', 'Dutch oven', 'electric fan', 'electric locomotive', 'envelope', 'feather boa', 'fireboat', 'fire engine', 'football helmet', 'forklift', 'freight car', 'frying pan', 'garbage truck', 'gas mask', 'gas pump', 'go-kart', 'golf ball', 'golf cart', 'grille', 'grocery store', 'guillotine', 'barrette', 'half-track', 'hammer', 'hand-held computer', 'hard disk drive', 'harvester', 'hatchet', 'holster', 'honeycomb', 'hook', 'horizontal bar', 'horse-drawn vehicle', \"jack-o'-lantern\", 'jeep', 'jigsaw puzzle', 'pulled rickshaw', 'joystick', 'knot', 'lab coat', 'ladle', 'laptop computer', 'lawn mower', 'lifeboat', 'lighter', 'limousine', 'ocean liner', 'speaker', 'sawmill', 'magnetic compass', 'mailbox', 'manhole cover', 'match', 'maze', 'medicine chest', 'microwave oven', 'military uniform', 'milk can', 'minibus', 'minivan', 'missile', 'mobile home', 'Model T', 'modem', 'monitor', 'moped', 'mortar', 'scooter', 'mountain bike', 'tent', 'computer mouse', 'mousetrap', 'moving van', 'neck brace', 'odometer', 'oil filter', 'oscilloscope', 'bullock cart', 'oxygen mask', 'packet', 'paddle wheel', 'padlock', 'paintbrush', 'parachute', 'parking meter', 'passenger car', 'payphone', 'pencil case', 'pencil sharpener', 'Petri dish', 'photocopier', 'picket fence', 'pickup truck', 'pier', 'pill bottle', 'ping-pong ball', 'hand plane', 'plow', 'plunger', 'Polaroid camera', 'pole', 'police van', 'soda bottle', 'power drill', 'printer', 'projectile', 'projector', 'hockey puck', 'punching bag', 'race car', 'radiator', 'radio', 'radio telescope', 'rain barrel', 'recreational vehicle', 'reflex camera', 'refrigerator', 'remote control', 'restaurant', 'revolver', 'rifle', 'rotisserie', 'eraser', 'ruler', 'running shoe', 'safe', 'sandal', 'weighing scale', 'school bus', 'scoreboard', 'CRT screen', 'screw', 'screwdriver', 'seat belt', 'sewing machine', 'shopping cart', 'shovel', 'ski', 'sleeping bag', 'slide rule', 'sliding door', 'slot machine', 'snorkel', 'snowmobile', 'snowplow', 'solar thermal collector', 'space bar', 'space heater', 'space shuttle', 'motorboat', 'sports car', 'spotlight', 'steam locomotive', 'through arch bridge', 'stopwatch', 'stove', 'strainer', 'tram', 'stretcher', 'suspension bridge', 'mop', 'swing', 'switch', 'syringe', 'tank', 'tape player', 'television', 'threshing machine', 'tile roof', 'toaster', 'toilet seat', 'torch', 'totem pole', 'tow truck', 'toy store', 'tractor', 'semi-trailer truck', 'tray', 'trimaran', 'trolleybus', 'tub', 'turnstile', 'typewriter keyboard', 'viaduct', 'wall clock', 'military aircraft', 'sink', 'washing machine', 'water bottle', 'water tower', 'whistle', 'wing', 'shipwreck', 'yurt', 'website', 'traffic sign', 'traffic light', 'dust jacket', 'ice pop', 'hot dog', 'spaghetti squash', 'acorn squash', 'butternut squash', 'cucumber', 'hay', 'meatloaf', 'burrito', 'alp', 'bubble', 'cliff', 'coral reef', 'volcano', 'baseball player', 'scuba diver', 'rapeseed', 'corn', 'coral fungus', 'agaric', 'stinkhorn mushroom', 'ear']\n\n\n\n\n\nThe prediction set is: ['alligator lizard', 'trilobite', 'scorpion', 'tick', 'centipede', 'conch', 'snail', 'chiton', 'crayfish', 'hermit crab', 'isopod', 'ground beetle', 'weevil', 'cockroach', 'cicada', 'sea cucumber', 'armadillo', 'corn']\n\n\n\n\n\nThe prediction set is: ['tench', 'great white shark', 'tiger shark', 'hammerhead shark', 'electric ray', 'stingray', 'cock', 'hen', 'house finch', 'junco', 'indigo bunting', 'vulture', 'spotted salamander', 'loggerhead sea turtle', 'leatherback sea turtle', 'green iguana', 'desert grassland whiptail lizard', 'frilled-necked lizard', 'Gila monster', 'European green lizard', 'triceratops', 'eastern hog-nosed snake', 'kingsnake', 'vine snake', 'night snake', 'boa constrictor', 'harvestman', 'scorpion', 'yellow garden spider', 'barn spider', 'European garden spider', 'southern black widow', 'tarantula', 'tick', 'centipede', 'black grouse', 'ruffed grouse', 'prairie grouse', 'partridge', 'grey parrot', 'macaw', 'sulphur-crested cockatoo', 'coucal', 'hornbill', 'toucan', 'tusker', 'echidna', 'wombat', 'jellyfish', 'sea anemone', 'flatworm', 'conch', 'slug', 'chambered nautilus', 'Dungeness crab', 'rock crab', 'red king crab', 'American lobster', 'spiny lobster', 'crayfish', 'hermit crab', 'isopod', 'American coot', 'dunlin', 'king penguin', 'albatross', 'grey whale', 'killer whale', 'dugong', 'sea lion', 'Chihuahua', 'Japanese Chin', 'Maltese', 'Pekingese', 'Shih Tzu', 'King Charles Spaniel', 'toy terrier', 'Rhodesian Ridgeback', 'Afghan Hound', 'Basset Hound', 'Beagle', 'Bloodhound', 'Bluetick Coonhound', 'Black and Tan Coonhound', 'Treeing Walker Coonhound', 'English foxhound', 'Redbone Coonhound', 'borzoi', 'Italian Greyhound', 'Weimaraner', 'Staffordshire Bull Terrier', 'American Staffordshire Terrier', 'Bedlington Terrier', 'Kerry Blue Terrier', 'Irish Terrier', 'Norfolk Terrier', 'Norwich Terrier', 'Yorkshire Terrier', 'Lakeland Terrier', 'Sealyham Terrier', 'Cairn Terrier', 'Australian Terrier', 'Dandie Dinmont Terrier', 'Boston Terrier', 'Miniature Schnauzer', 'Giant Schnauzer', 'Scottish Terrier', 'Tibetan Terrier', 'Australian Silky Terrier', 'Soft-coated Wheaten Terrier', 'West Highland White Terrier', 'Lhasa Apso', 'Flat-Coated Retriever', 'Curly-coated Retriever', 'Golden Retriever', 'Labrador Retriever', 'Chesapeake Bay Retriever', 'German Shorthaired Pointer', 'Vizsla', 'Gordon Setter', 'Brittany', 'Clumber Spaniel', 'English Springer Spaniel', 'Cocker Spaniels', 'Sussex Spaniel', 'Irish Water Spaniel', 'Kuvasz', 'Schipperke', 'Groenendael', 'Briard', 'Australian Kelpie', 'Komondor', 'Old English Sheepdog', 'Bouvier des Flandres', 'Rottweiler', 'German Shepherd Dog', 'Dobermann', 'Miniature Pinscher', 'Greater Swiss Mountain Dog', 'Bernese Mountain Dog', 'Appenzeller Sennenhund', 'Entlebucher Sennenhund', 'Boxer', 'Bullmastiff', 'Tibetan Mastiff', 'French Bulldog', 'Great Dane', 'husky', 'Alaskan Malamute', 'Siberian Husky', 'Dalmatian', 'Affenpinscher', 'Basenji', 'pug', 'Leonberger', 'Newfoundland', 'Pyrenean Mountain Dog', 'Samoyed', 'Pomeranian', 'Chow Chow', 'Griffon Bruxellois', 'Pembroke Welsh Corgi', 'Toy Poodle', 'Miniature Poodle', 'Standard Poodle', 'Mexican hairless dog', 'Alaskan tundra wolf', 'tabby cat', 'tiger cat', 'Persian cat', 'Siamese cat', 'Egyptian Mau', 'leopard', 'American black bear', 'ground beetle', 'rhinoceros beetle', 'grasshopper', 'cricket', 'stick insect', 'cockroach', 'mantis', 'ringlet', 'monarch butterfly', 'starfish', 'sea urchin', 'cottontail rabbit', 'Angora rabbit', 'hamster', 'porcupine', 'beaver', 'common sorrel', 'zebra', 'hippopotamus', 'ox', 'water buffalo', 'weasel', 'mink', 'European polecat', 'black-footed ferret', 'armadillo', 'gibbon', 'Asian elephant', 'African bush elephant', 'snoek', 'eel', 'coho salmon', 'rock beauty', 'sturgeon', 'garfish', 'lionfish', 'abacus', 'abaya', 'academic gown', 'accordion', 'acoustic guitar', 'aircraft carrier', 'airship', 'altar', 'ambulance', 'analog clock', 'apron', 'waste container', 'assault rifle', 'backpack', 'bakery', 'balloon', 'Band-Aid', 'banjo', 'baluster', 'barbell', 'barber chair', 'barbershop', 'barometer', 'barrel', 'baseball', 'basketball', 'bassinet', 'bassoon', 'swimming cap', 'bath towel', 'bathtub', 'station wagon', 'lighthouse', 'beaker', 'military cap', 'beer bottle', 'beer glass', 'bell-cot', 'bib', 'tandem bicycle', 'bikini', 'ring binder', 'binoculars', 'bobsleigh', 'bolo tie', 'poke bonnet', 'bookcase', 'bookstore', 'bow', 'bow tie', 'brass', 'bra', 'breastplate', 'broom', 'bucket', 'buckle', 'bulletproof vest', 'high-speed train', 'butcher shop', 'taxicab', 'cauldron', 'candle', 'cannon', 'can opener', 'cardigan', 'car mirror', 'carousel', 'tool kit', 'carton', 'car wheel', 'automated teller machine', 'cassette', 'cassette player', 'CD player', 'cello', 'mobile phone', 'chain', 'chain mail', 'chainsaw', 'chest', 'chiffonier', 'chime', 'china cabinet', 'Christmas stocking', 'church', 'movie theater', 'cleaver', 'cliff dwelling', 'cloak', 'clogs', 'cocktail shaker', 'coffee mug', 'coffeemaker', 'coil', 'combination lock', 'computer keyboard', 'confectionery store', 'convertible', 'corkscrew', 'cornet', 'cowboy boot', 'cowboy hat', 'cradle', 'crane (machine)', 'crash helmet', 'crate', 'infant bed', 'Crock Pot', 'croquet ball', 'crutch', 'cuirass', 'dam', 'desk', 'desktop computer', 'rotary dial telephone', 'diaper', 'digital clock', 'digital watch', 'dining table', 'dishcloth', 'dishwasher', 'disc brake', 'dock', 'dome', 'doormat', 'drilling rig', 'drum', 'drumstick', 'dumbbell', 'Dutch oven', 'electric fan', 'electric guitar', 'envelope', 'espresso machine', 'face powder', 'feather boa', 'filing cabinet', 'fireboat', 'fire screen sheet', 'flagpole', 'flute', 'folding chair', 'football helmet', 'forklift', 'fountain', 'fountain pen', 'four-poster bed', 'freight car', 'French horn', 'frying pan', 'fur coat', 'gas mask', 'gas pump', 'goblet', 'golf ball', 'golf cart', 'gondola', 'gong', 'gown', 'grand piano', 'grille', 'grocery store', 'guillotine', 'barrette', 'hair spray', 'hammer', 'hamper', 'hair dryer', 'hand-held computer', 'handkerchief', 'harmonica', 'harp', 'hatchet', 'holster', 'home theater', 'hook', 'hoop skirt', 'horizontal bar', 'hourglass', 'iPod', 'clothes iron', \"jack-o'-lantern\", 'jeans', 'T-shirt', 'pulled rickshaw', 'joystick', 'kimono', 'knee pad', 'knot', 'lab coat', 'ladle', 'lampshade', 'laptop computer', 'lens cap', 'library', 'limousine', 'ocean liner', 'lipstick', 'slip-on shoe', 'lotion', 'speaker', 'sawmill', 'magnetic compass', 'mail bag', 'mailbox', 'tights', 'tank suit', 'manhole cover', 'maraca', 'marimba', 'mask', 'match', 'maypole', 'maze', 'medicine chest', 'megalith', 'microphone', 'microwave oven', 'military uniform', 'milk can', 'minibus', 'miniskirt', 'minivan', 'missile', 'mitten', 'mobile home', 'Model T', 'modem', 'monastery', 'monitor', 'square academic cap', 'mosque', 'mosquito net', 'scooter', 'mountain bike', 'tent', 'mousetrap', 'moving van', 'muzzle', 'nail', 'neck brace', 'necklace', 'nipple', 'notebook computer', 'obelisk', 'oboe', 'ocarina', 'oil filter', 'organ', 'oscilloscope', 'overskirt', 'oxygen mask', 'packet', 'paddle', 'padlock', 'paintbrush', 'pajamas', 'palace', 'pan flute', 'paper towel', 'parachute', 'parallel bars', 'park bench', 'passenger car', 'patio', 'payphone', 'pedestal', 'pencil case', 'pencil sharpener', 'perfume', 'Petri dish', 'photocopier', 'plectrum', 'Pickelhaube', 'picket fence', 'pier', 'piggy bank', 'pill bottle', 'pillow', 'ping-pong ball', 'pirate ship', 'pitcher', 'planetarium', 'plastic bag', 'plate rack', 'plunger', 'Polaroid camera', 'pole', 'poncho', 'billiard table', 'soda bottle', 'pot', \"potter's wheel\", 'power drill', 'prayer rug', 'printer', 'prison', 'projectile', 'projector', 'punching bag', 'purse', 'quill', 'quilt', 'race car', 'racket', 'radiator', 'radio', 'radio telescope', 'rain barrel', 'recreational vehicle', 'reel', 'reflex camera', 'refrigerator', 'remote control', 'restaurant', 'revolver', 'rifle', 'rocking chair', 'rotisserie', 'rugby ball', 'ruler', 'running shoe', 'safe', 'safety pin', 'salt shaker', 'sandal', 'sarong', 'saxophone', 'scabbard', 'weighing scale', 'school bus', 'schooner', 'CRT screen', 'screw', 'screwdriver', 'seat belt', 'sewing machine', 'shield', 'shoe store', 'shoji', 'shopping basket', 'shopping cart', 'shovel', 'shower cap', 'shower curtain', 'ski mask', 'sleeping bag', 'sliding door', 'slot machine', 'snorkel', 'soap dispenser', 'soccer ball', 'sock', 'solar thermal collector', 'sombrero', 'space bar', 'space heater', 'space shuttle', 'spatula', 'spider web', 'spindle', 'sports car', 'spotlight', 'stage', 'through arch bridge', 'steel drum', 'stethoscope', 'scarf', 'stopwatch', 'stove', 'strainer', 'tram', 'stretcher', 'couch', 'stupa', 'submarine', 'suit', 'sundial', 'sunglass', 'sunglasses', 'sunscreen', 'suspension bridge', 'mop', 'sweatshirt', 'swimsuit', 'swing', 'switch', 'syringe', 'table lamp', 'tape player', 'teapot', 'teddy bear', 'television', 'tennis ball', 'front curtain', 'thimble', 'throne', 'tile roof', 'toaster', 'tobacco shop', 'toilet seat', 'torch', 'totem pole', 'toy store', 'semi-trailer truck', 'tray', 'trench coat', 'tricycle', 'trimaran', 'tripod', 'trombone', 'tub', 'turnstile', 'typewriter keyboard', 'umbrella', 'unicycle', 'upright piano', 'vacuum cleaner', 'vase', 'vault', 'velvet', 'vending machine', 'vestment', 'violin', 'waffle iron', 'wall clock', 'wallet', 'wardrobe', 'military aircraft', 'sink', 'washing machine', 'water bottle', 'water jug', 'water tower', 'whiskey jug', 'whistle', 'wig', 'window screen', 'window shade', 'Windsor tie', 'wine bottle', 'wing', 'wok', 'wooden spoon', 'wool', 'split-rail fence', 'yawl', 'yurt', 'website', 'comic book', 'crossword', 'traffic sign', 'traffic light', 'dust jacket', 'menu', 'plate', 'consomme', 'hot pot', 'ice pop', 'pretzel', 'hot dog', 'cabbage', 'zucchini', 'butternut squash', 'cucumber', 'mushroom', 'orange', 'pineapple', 'banana', 'jackfruit', 'custard apple', 'chocolate syrup', 'dough', 'pizza', 'pot pie', 'burrito', 'red wine', 'espresso', 'cup', 'bubble', 'cliff', 'coral reef', 'geyser', 'lakeshore', 'promontory', 'shoal', 'seashore', 'valley', 'volcano', 'baseball player', 'bridegroom', 'scuba diver', \"yellow lady's slipper\", 'corn', 'coral fungus', 'agaric', 'gyromitra', 'earth star', 'hen-of-the-woods', 'bolete', 'toilet paper']\n\n\n\n\n\nThe prediction set is: []\n\n\n\n\n\nThe prediction set is: ['tennis ball']\n\n\n\n\n\nThe prediction set is: []\n\n\n\n\n\nThe prediction set is: ['jay', 'tick', 'grey parrot', 'macaw', 'slug', 'common gallinule', 'Pekingese', 'Shih Tzu', 'Papillon', 'West Highland White Terrier', 'Shetland Sheepdog', 'collie', 'rhinoceros beetle', 'dragonfly', 'damselfly', 'sea urchin', 'accordion', 'analog clock', 'backpack', 'ballpoint pen', 'Band-Aid', 'bassoon', 'beaker', 'bib', 'ring binder', 'bolo tie', 'bookcase', 'bookstore', 'bow', 'bow tie', 'broom', 'bucket', 'buckle', 'cauldron', 'candle', 'can opener', 'tool kit', 'carton', 'cassette', 'cassette player', 'CD player', 'mobile phone', 'chain', 'chime', 'Christmas stocking', 'cloak', 'coffee mug', 'coil', 'computer keyboard', 'croquet ball', 'crutch', 'desk', 'digital clock', 'digital watch', 'dishcloth', 'drum', 'drumstick', 'electric guitar', 'envelope', 'face powder', 'feather boa', 'filing cabinet', 'flute', 'fountain pen', 'grand piano', 'barrette', 'hair spray', 'hammer', 'hand-held computer', 'handkerchief', 'hard disk drive', 'harmonica', 'hook', 'iPod', 'jeans', 'jigsaw puzzle', 'knot', 'lab coat', 'ladle', 'laptop computer', 'lens cap', 'paper knife', 'library', 'lighter', 'lipstick', 'lotion', 'loupe', 'mail bag', 'maraca', 'marimba', 'mask', 'match', 'maypole', 'medicine chest', 'microphone', 'mitten', 'modem', 'square academic cap', 'computer mouse', 'nail', 'necklace', 'nipple', 'oboe', 'ocarina', 'oil filter', 'organ', 'oscilloscope', 'packet', 'paintbrush', 'pan flute', 'paper towel', 'pencil case', 'pencil sharpener', 'perfume', 'plectrum', 'pinwheel', 'plunger', 'pole', 'pot', 'printer', 'purse', 'quill', 'racket', 'radio', 'reel', 'remote control', 'revolver', 'rifle', 'eraser', 'ruler', 'safety pin', 'scabbard', 'screw', 'screwdriver', 'shovel', 'ski', 'slide rule', 'snorkel', 'sock', 'sombrero', 'soup bowl', 'spatula', 'spindle', 'steel drum', 'stethoscope', 'scarf', 'strainer', 'sunglass', 'sunglasses', 'sunscreen', 'mop', 'switch', 'syringe', 'tape player', 'tennis ball', 'thimble', 'torch', 'tray', 'tripod', 'umbrella', 'velvet', 'violin', 'wall clock', 'wallet', 'water bottle', 'whistle', 'wig', 'wooden spoon', 'wool', 'comic book', 'crossword', 'dust jacket', 'ice pop', 'toilet paper']\n\n\n\n\n\nThe prediction set is: ['grey parrot', 'macaw', 'lorikeet']"
  }
]